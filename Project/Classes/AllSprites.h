
/**
This file is part of Critical Thieving. Copyright 2013 - Joseph Lewis

DO NOT EDIT THIS FILE MANUALLY, IT IS AUTO GENERATED BY generate_all_sprites.py
INSTEAD, EDIT sprites.csv AND RE-RUN generate_all_sprites.py

**/

#ifndef ALL_SPRITES_H
#define ALL_SPRITES_H
#include "Sprite.h"
#include "Action.h"
#include "AllActions.h"
#include "CharacterProperties.h"
#include "faker.h"
#include "Simulation.h"

namespace Sprites
{
const int TILE_WIDTH = 16; // tile width in points

	class Player : public PlayerSprite
	{
		public:
			// Creates a new character with the given characteristics
			Player(Simulation* world)
			:PlayerSprite("thief_1.png", "Thief", world)
			{
				
				getSprite()->setPosition(ccp(5 * world->getWorld()->getTileSize().height, 5 * world->getWorld()->getTileSize().width));
			}
	};

	class VendingMachine : public NullSprite
	{
		public:
			// Creates a new character with the given characteristics
			VendingMachine(Simulation* world)
			:NullSprite("vend.png", "ColaMatic", world)
			{
				new SpriteActions::BuyEnergyDrink(this);
				new SpriteActions::BuyHotDog(this);
				new SpriteActions::StealHotDog(this);
				new SpriteActions::LightonFire(this);
				getSprite()->setPosition(ccp(20 * world->getWorld()->getTileSize().height, 2 * world->getWorld()->getTileSize().width));
			}
	};

	class Policeman : public CharacterSprite
	{
		public:
			// Creates a new character with the given characteristics
			Policeman(Simulation* world)
			:CharacterSprite("policeman_1.png", "Policeman Bob", world)
			{
				new SpriteActions::GiveDonut(this);
				new SpriteActions::StealTazer(this);
				new SpriteActions::RobatScissorpoint(this);
				new SpriteActions::TazeandRob(this);
				new SpriteActions::ShakeHand(this);
				new SpriteActions::Punch(this);
				new SpriteActions::GiveHaircut(this);
				getSprite()->setPosition(ccp(10 * world->getWorld()->getTileSize().height, 20 * world->getWorld()->getTileSize().width));
			}
	};

	class Barber : public CharacterSprite
	{
		public:
			// Creates a new character with the given characteristics
			Barber(Simulation* world)
			:CharacterSprite("barber_1.png", "Barber Joe", world)
			{
				new SpriteActions::BuyHaircut(this);
				new SpriteActions::StealScissors(this);
				new SpriteActions::RobatScissorpoint(this);
				new SpriteActions::TazeandRob(this);
				new SpriteActions::ShakeHand(this);
				new SpriteActions::Punch(this);
				new SpriteActions::GiveHaircut(this);
				getSprite()->setPosition(ccp(20 * world->getWorld()->getTileSize().height, 10 * world->getWorld()->getTileSize().width));
			}
	};

	class Scared : public CharacterSprite
	{
		public:
			// Creates a new character with the given characteristics
			Scared(Simulation* world)
			:CharacterSprite("orange_1.png", "Orange Guy", world)
			{
				new SpriteActions::Hug(this);
				new SpriteActions::StealWallet(this);
				new SpriteActions::RobatScissorpoint(this);
				new SpriteActions::TazeandRob(this);
				new SpriteActions::GiveMoney(this);
				new SpriteActions::Punch(this);
				new SpriteActions::GiveHaircut(this);
				getSprite()->setPosition(ccp(30 * world->getWorld()->getTileSize().height, 20 * world->getWorld()->getTileSize().width));
			}
	};

	class Bank : public NullSprite
	{
		public:
			// Creates a new character with the given characteristics
			Bank(Simulation* world)
			:NullSprite("bank_small.png", "Bank", world)
			{
				new SpriteActions::RobBank(this);
				new SpriteActions::SolicitCharity(this);
				new SpriteActions::RobinHoodBonus(this);
				new SpriteActions::LightonFire(this);
				getSprite()->setPosition(ccp(5 * world->getWorld()->getTileSize().height, 24 * world->getWorld()->getTileSize().width));
			}
	};

	class Restaurant : public NullSprite
	{
		public:
			// Creates a new character with the given characteristics
			Restaurant(Simulation* world)
			:NullSprite("Pizzeria.png", "Pizzeria", world)
			{
				new SpriteActions::BuyPizza(this);
				new SpriteActions::StealPizza(this);
				new SpriteActions::SellCatMeat(this);
				new SpriteActions::LightonFire(this);
				getSprite()->setPosition(ccp(13 * world->getWorld()->getTileSize().height, 24 * world->getWorld()->getTileSize().width));
			}
	};

	class Mart : public NullSprite
	{
		public:
			// Creates a new character with the given characteristics
			Mart(Simulation* world)
			:NullSprite("Minimart.png", "Mini-Mart", world)
			{
				new SpriteActions::BuyDonut(this);
				new SpriteActions::BuyScissors(this);
				new SpriteActions::BuyTazer(this);
				new SpriteActions::LightonFire(this);
				getSprite()->setPosition(ccp(21 * world->getWorld()->getTileSize().height, 24 * world->getWorld()->getTileSize().width));
			}
	};

	class Tree : public NullSprite
	{
		public:
			// Creates a new character with the given characteristics
			Tree(Simulation* world)
			:NullSprite("tree.png", "Tree", world)
			{
				new SpriteActions::TrimTree(this);
				new SpriteActions::SaveKitten(this);
				new SpriteActions::TazeKitten(this);
				new SpriteActions::LightonFire(this);
				getSprite()->setPosition(ccp(29 * world->getWorld()->getTileSize().height, 22 * world->getWorld()->getTileSize().width));
			}
	};


	/**
	 * Adds all characters in the level to the given vector after instantiating
	 * them with the given global blackboard.
	 */
	void createCharacters(std::vector<Sprite*> &sprites, Simulation* world)
	{

		sprites.push_back(new VendingMachine(world));
		sprites.push_back(new Bank(world));
		sprites.push_back(new Restaurant(world));
		sprites.push_back(new Mart(world));
		sprites.push_back(new Tree(world));
		sprites.push_back(new Policeman(world));
		sprites.push_back(new Barber(world));
		sprites.push_back(new Scared(world));
		sprites.push_back(new Player(world));
	}

}
#endif

